#+TITLE: Design Patterns
#+DATE: <2021-02-16 Tue>

#+BEGIN_PREVIEW
/Based on  Elements of Reusable Object-Oriented Software by Erich Gamma, Richard Helm, Ralph
Johnson and John Vlissides/
#+END_PREVIEW

* Content
** [[file:Introduction/][Introduction]]
** TODO [[file:Behavioral Patterns/][Behavioral Patterns]] [2/19]
*** DONE [[file:Behavioral Patterns/Strategy/][Strategy]]
*** DONE [[file:Behavioral Patterns/Observer/][Observer]]
*** TODO Singleton
*** TODO Command
*** TODO Null Object
*** TODO Specification Pattern
*** TODO State
*** TODO Data Access Pattern
*** TODO Mediator
*** TODO Chain of Responsibility
*** TODO Template Method
*** TODO Visitor
*** TODO Memento
*** TODO Rules Engine Pattern
*** TODO Bridge
*** TODO Interpreter
*** TODO Iterator
*** TODO Discussion of Behavioral Patterns
*** TODO Blackboar
** TODO Creational Patterns [0/5]
*** TODO Builder
*** TODO Prototype
*** TODO Factory
*** TODO Factory Method
*** TODO Abstract Factory
** TODO Structural Patterns [0/7]
*** TODO Facade
*** TODO Decorator
+ *Intent*
    Attach additional responsibilities to an object dynamically. Decorators provide a flexible
    alternative to subclassing for extending functionality.
+ *Other names*: Wrapper
+ *The problem*
  Sometimes we want to add responsibilities to individual objects, not to an entire class. A
  graphical user interface toolkit, for example, should let you add properties like borders
  or behaviors like scrolling to any user interface component.

  One way to add responsibilities is with inheritance. Inheriting a border from another
  class puts a border around every subclass instance. This is inflexible, however, because
  the choice of border is made statically. A client can't control how and when to decorate
  the component with a border.

  A more flexible approach is to enclose the component in another object that adds
  the border. *The enclosing object is called a decorator*. The decorator conforms to
  the interface of the component it decorates so that its presence is transparent to the
  component's clients. The decorator forwards requests to the component and may
  perform additional actions (such as drawing a border) before or after forwarding.
  Transparency lets you nest decorators recursively, thereby allowing an unlimited
  number of added responsibilities.

*** TODO Composite
*** TODO Adapter
*** TODO Flyweight
*** TODO Proxy
*** TODO Discussion of Structural Patterns
