:PROPERTIES:
:ID:       7b8fa54f-c997-4476-a768-77f349bf6129
:END:
#+title: Creational Patterns

Creational [[id:d5e06849-0ff0-4c9d-8282-c2181722cf92][design patterns]] abstract the instantiation process. They help make a system independent of how its
objects are created, composed, and represented:

+ A class creational pattern uses inheritance to vary the class that's instantiated.
+ An object creational pattern will delegate instantiation to another object.

There are two recurring themes in these patterns:

+ They all encapsulate knowledge about which concrete classes the system uses.
+ They hide how instances of these classes are created and put together.

All the system at large knows about the objects is their interfaces as defined by abstract classes.
Consequently, the creational patterns give you a lot of flexibility in what gets created, who creates it, how
it gets created, and when.  They let you configure a system with "product" objects that vary widely in
structure and functionality. Configuration can be static (that is, specified at compile-time) or dynamic (at
run-time).


#+begin_src csharp
// API Wrapper, twitter
var x = new Twitter_Cleint("API_KEY")
    // http client
#+end_src

