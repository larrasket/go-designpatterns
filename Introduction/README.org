#+TITLE: Design Patterns
#+DATE: <2021-02-16 Tue>

#+BEGIN_PREVIEW
/Based on  Elements of Reusable Object-Oriented Software by Erich Gamma, Richard Helm, Ralph
Johnson and John Vlissides/
#+END_PREVIEW

* Introduction`
+ Course Overview -> [[#ptrns][Design Patterns]]
+ Prerequisite:
  + Object Oriented Design and Programming
  + We are going to use *Go* and may encounter with: C#, Java and C++. It's okay if you know
    any of these language but we are going to be Golang oriented.

* Introduction & Basic Definition
:PROPERTIES:
:CUSTOM_ID: ptrns
:END:

+ *Intuition*: What does the world pattern even mean?

One thing expert designers know not to do is solve every problem from first principles.
Rather, they reuse solutions that have worked for them in the past. When they find a good
solution, they use it again and again. _Such experience is part of what makes them experts._
Consequently, *you'll find recurring patterns of classes and communicating objects in many
object-oriented systems*. These patterns solve specific design problems and make
object-oriented designs more flexible, elegant, and ultimately reusable. They help designers
reuse successful designs by basing new designs on prior experience.  A designer who is
familiar with such patterns can apply them immediately to design problems without having to
rediscover them.

We all know the value of design experience. How many times have you had design dejau that
feeling that you've solved a problem before but not knowing exactly where or how? If you
could remember the details of the previous problem and how you solved it, then you could
reuse the experience instead of rediscovering it. However, we don't do a good job of
recording experience in software design for others to use.


Christopher Alexander says, "Each pattern describes a problem which occurs over and over
again in our environment, and then describes the core of the solution to that problem, in
such a way that you can use this solution a million times over, without ever doing it the
same way twice". Even though Alexander was talking about patterns in buildings and towns,
what he says is true about object-oriented design patterns. Our solutions are expressed in
terms of objects and interfaces instead of walls and doors, but at the core of both kinds of
patterns is a solution to a problem in a context.  In general, a pattern has four essential
elements:

1. *The pattern name* is a handle we can use to describe a design problem, its solutions, and
   consequences in a word or two. Naming a pattern immediately increases our design
   vocabulary. It lets us design at a higher level of abstraction. Having a vocabulary for
   patterns lets us talk about them with our colleagues, in our documentation, and even to
   ourselves. It makes it easier to think about designs and to communicate them and their
   trade-offs to others. Finding good names has been one of the hardest parts of developing
   our catalog.
2. *The problem* describes when to apply the pattern. It explains the problem and its
   context.  It might describe specific design problems such as how to represent algorithms
   as objects. It might describe class or object structures that are symptomatic of an
   inflexible design. Sometimes the problem will include a list of conditions that must be
   met before it makes sense to apply the pattern.
3. *The solution* describes the elements that make up the design, their relationships,
   responsibilities, and collaborations. The solution doesn't describe a particular concrete
   design or implementation, because a pattern is like a template that can be applied in
   many different situations. Instead, the pattern provides an abstract description of a
   design problem and how a general arrangement of elements (classes and objects in our
   case) solves it.
4. *The consequences* are the results and trade-offs of applying the pattern. Though
   consequences are often unvoiced when we describe design decisions, they are critical for
   evaluating design alternatives and for understanding the costs and benefits of applying
   the pattern.

* Resources
+ Text books:
  + Mainly: [[file:Design Patterns Elements of Reusable Object-Oriented Software.pdf][Design Patterns Elements of Reusable Object-Oriented Software]]
  + Side by side with, and with respect to: [[file:Design Patterns Elements of Reusable Object-Oriented Software.pdf][Design Patterns Head First]]
+ Assents available on the git repo.
